<div class="container-fluid p-0">
  <!-- Map Controls -->
  <div class="position-absolute start-0 top-0 mt-4 ms-4" style="z-index: 1000; width: 300px;">
    <!-- Header -->
    <div class="card shadow-sm mb-3">
      <div class="card-body p-3">
        <h5 class="mb-1">
          <i class="fas fa-map text-primary"></i> Wanderistan Map
        </h5>
        <p class="text-muted mb-0 small">Explore destinations with video guides</p>
      </div>
    </div>

    <!-- Search and Filters -->
    <div class="card shadow-sm">
      <div class="card-body">
        <!-- Search with Dropdown -->
        <div class="mb-3 position-relative">
          <div class="input-group">
            <input type="text"
                   id="map-search"
                   class="form-control"
                   placeholder="Search places..."
                   onkeyup="handleSearchKeyup(event)"
                   autocomplete="off">
            <button class="btn btn-primary" type="button" onclick="searchPlaces()">
              <i class="fas fa-search"></i>
            </button>
          </div>
          <!-- Search Suggestions Dropdown -->
          <div id="search-suggestions" class="search-suggestions d-none">
            <!-- Suggestions will be populated here -->
          </div>
        </div>

        <!-- Category Filter -->
        <div class="mb-3">
          <label class="form-label small fw-bold">Category</label>
          <select id="category-filter" class="form-select" onchange="filterPlaces()">
            <option value="">All Categories</option>
            <% Place::CATEGORIES.each do |category| %>
              <option value="<%= category %>"><%= category.titleize %></option>
            <% end %>
          </select>
        </div>

        <!-- Region Filter -->
        <div class="mb-3">
          <label class="form-label small fw-bold">Region</label>
          <select id="region-filter" class="form-select" onchange="filterPlaces()">
            <option value="">All Regions</option>
            <% Place::REGIONS.each do |region| %>
              <option value="<%= region %>"><%= region.titleize %></option>
            <% end %>
          </select>
        </div>

        <!-- Stats -->
        <div class="d-flex justify-content-between text-muted small">
          <span id="places-count">0 places</span>
          <span id="videos-count">0 videos</span>
        </div>
      </div>
    </div>
  </div>

  <!-- Map Container -->
  <div id="map" style="height: 100vh; width: 100%;">
    <div class="map-loading">
      <div class="text-center">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-3 text-muted">Loading Map...</p>
      </div>
    </div>
  </div>

  <!-- Legend -->
  <div class="position-absolute end-0 bottom-0 mb-4 me-4" style="z-index: 1000;">
    <div class="card shadow-sm">
      <div class="card-body p-3">
        <h6 class="mb-2 small fw-bold">Map Legend</h6>
        <div class="d-flex flex-column gap-2">
          <% Place::CATEGORIES.each do |category| %>
            <div class="d-flex align-items-center">
              <div class="marker-dot" style="background-color: <%= category_color(category) %>;"></div>
              <span class="ms-2 small"><%= category.titleize %></span>
            </div>
          <% end %>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Load Mapbox CSS immediately -->
<link href='https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.css' rel='stylesheet' />

<!-- Load Mapbox JS immediately -->
<script src='https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.js'></script>

<script>
console.log('Map with video markers loaded');

// Global variables
let currentMap = null;
let currentMarkers = [];
let places = [];

// Initialize map
function createMap() {
  console.log('Creating map...');

  try {
    const token = '<%= ENV["MAPBOX_API_KEY"] %>';
    mapboxgl.accessToken = token;

    const map = new mapboxgl.Map({
      container: 'map',
      style: 'mapbox://styles/mapbox/streets-v11',
      center: [78.9629, 20.5937], // India center
      zoom: 4
    });

    // Add navigation controls
    map.addControl(new mapboxgl.NavigationControl(), 'top-right');
    map.addControl(new mapboxgl.FullscreenControl(), 'top-right');

    // Store map reference
    currentMap = map;

    map.on('load', () => {
      console.log('Map loaded successfully');
      hideLoading();
      loadPlaces();
    });

    map.on('error', (e) => {
      console.error('Map error:', e.error);
      showError('Failed to load map');
    });

  } catch (error) {
    console.error('Error creating map:', error);
    showError('Failed to initialize map');
  }
}

// Load places from Mapbox Geocoding API
async function loadPlaces(showSuggestions = false) {
  try {
    const searchTerm = document.getElementById('map-search').value.trim();
    const category = document.getElementById('category-filter').value;
    const region = document.getElementById('region-filter').value;

    if (searchTerm) {
      // Use Mapbox Geocoding API with proper parameters
      const token = '<%= ENV["MAPBOX_API_KEY"] %>';
      const bbox = '68.1766451354,6.5546079374,97.395561,35.6745457'; // India bounding box
      const url = `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(searchTerm)}.json?access_token=${token}&country=in&bbox=${bbox}&types=place,district,locality,neighborhood,address&language=en&limit=5&fuzzyMatch=true`;

      console.log('Fetching suggestions from:', url);
      const response = await fetch(url);
      const data = await response.json();
      console.log('Geocoding response:', data);

      places = data.features.map(feature => ({
        id: feature.id,
        text: feature.text,
        name: feature.text,
        description: feature.place_name,
        center: feature.center,
        type: feature.place_type[0],
        context: feature.context || []
      }));

      if (showSuggestions) {
        showSearchSuggestions(places);
      } else {
        hideSearchSuggestions();
        // Center map on first result if any
        if (places.length > 0) {
          selectPlace(places[0]);
        }
      }
    } else {
      places = [];
      hideSearchSuggestions();
    }

    updateMarkers();
    updateStats();
  } catch (error) {
    console.error('Error loading places:', error);
    showError('Failed to load places');
  }
}

// Show search suggestions dropdown
function showSearchSuggestions(places) {
  const suggestionsDiv = document.getElementById('search-suggestions');

  if (places.length === 0) {
    suggestionsDiv.innerHTML = `
      <div class="suggestion-empty">
        <i class="fas fa-map-marker-alt d-block mb-2"></i>
        <div class="fw-medium mb-1">No places found</div>
        <div class="small">Try a different search term</div>
      </div>
    `;
    suggestionsDiv.classList.remove('d-none');
    return;
  }

    const suggestionsHtml = places.map((place, index) => {
    // Get place type icon
    let typeIcon = 'fa-map-marker-alt';
    switch (place.type) {
      case 'place': typeIcon = 'fa-city'; break;
      case 'district': typeIcon = 'fa-map'; break;
      case 'locality': typeIcon = 'fa-building'; break;
      case 'neighborhood': typeIcon = 'fa-home'; break;
      case 'address': typeIcon = 'fa-map-pin'; break;
    }

    // Format place name and details
    const placeParts = place.description.split(',');
    const mainName = place.name;
    const details = placeParts.slice(1).join(',').trim();

    // Prepare place data for onclick
    const placeData = {
      name: mainName,
      description: details,
      latitude: place.center[1],
      longitude: place.center[0],
      type: place.type
    };

    return `
      <div class="suggestion-item ${index === 0 ? 'active' : ''}"
           onclick='handlePlaceSelection(${JSON.stringify(placeData)})'>
        <div class="suggestion-title">
          <i class="fas ${typeIcon} suggestion-icon"></i>
          ${mainName}
        </div>
        <div class="suggestion-details">${details}</div>
      </div>
    `;
  }).join('');

  suggestionsDiv.innerHTML = suggestionsHtml;
  suggestionsDiv.classList.remove('d-none');
}

// Hide search suggestions dropdown
function hideSearchSuggestions() {
  const suggestionsDiv = document.getElementById('search-suggestions');
  suggestionsDiv.classList.add('d-none');
}

// Select a place from suggestions
function selectPlace(place) {
  // Update search input
  document.getElementById('map-search').value = place.name;

  // Hide suggestions
  hideSearchSuggestions();

  // Center map on selected place
  currentMap.flyTo({
    center: [place.longitude, place.latitude],
    zoom: 12,
    essential: true
  });

  // Update markers
  places = [place];
  updateMarkers();
  updateStats();
}

// Update markers on the map
function updateMarkers() {
  // Remove existing markers
  currentMarkers.forEach(marker => marker.remove());
  currentMarkers = [];

  // Add new markers
  places.forEach(place => {
    const markerElement = document.createElement('div');
    markerElement.className = 'custom-marker';
    markerElement.style.backgroundColor = getCategoryColor(place.category);

    const marker = new mapboxgl.Marker(markerElement)
      .setLngLat([place.longitude, place.latitude])
      .setPopup(createPopup(place))
      .addTo(currentMap);

    currentMarkers.push(marker);
  });
}

// Create popup for a place
// Default videos for places
const defaultVideos = {
  'Delhi': [
    {
      title: 'Delhi Travel Guide - Must See Places',
      youtube_url: 'https://www.youtube.com/watch?v=MlkCbWugeio',
      embed_url: 'https://www.youtube.com/embed/MlkCbWugeio',
      thumbnail_url: 'https://i.ytimg.com/vi/MlkCbWugeio/hqdefault.jpg',
      description: 'Explore the best places to visit in Delhi'
    }
  ],
  'Mumbai': [
    {
      title: 'Mumbai City Guide',
      youtube_url: 'https://www.youtube.com/watch?v=PH5zTkK0qoo',
      embed_url: 'https://www.youtube.com/embed/PH5zTkK0qoo',
      thumbnail_url: 'https://i.ytimg.com/vi/PH5zTkK0qoo/hqdefault.jpg',
      description: 'Discover Mumbai\'s top attractions'
    }
  ]
};

async function createPopup(place) {
  // Check if we have default videos for this place
  let videos = defaultVideos[place.name] || [];

  // If no default videos, try to fetch preview video
  if (videos.length === 0) {
    try {
      const response = await fetch(`/videos/preview/${encodeURIComponent(place.name)}`);
      const data = await response.json();
      if (data.video) {
        videos = [data.video];
      }
    } catch (error) {
      console.error('Error fetching preview video:', error);
    }
  }

  // Get the first video for preview if available
  const previewVideo = videos[0];

  const popupContent = `
    <div class="video-popup">
      <div class="mb-3">
        <h6 class="mb-1">${place.name}</h6>
        <p class="small text-muted mb-2">${place.description}</p>
      </div>

      ${previewVideo ? `
        <div class="preview-video mb-3">
          <div class="ratio ratio-16x9 mb-2">
            <iframe src="${previewVideo.embed_url}"
                    title="${previewVideo.title}"
                    frameborder="0"
                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                    allowfullscreen>
            </iframe>
          </div>
          <p class="small text-muted mb-0 text-truncate">${previewVideo.title}</p>
        </div>
      ` : ''}

      <div class="d-flex flex-column gap-2">
        <button class="btn btn-sm btn-success w-100" onclick="showPlaceVideos('${place.name}')">
          <i class="fas fa-play-circle me-1"></i> Watch More Travel Videos
        </button>

        <button class="btn btn-sm btn-primary w-100" onclick="planTrip('${place.name}', ${place.latitude}, ${place.longitude})">
          <i class="fas fa-plus me-1"></i> Plan Trip to ${place.name}
        </button>
      </div>
    </div>
  `;

  return new mapboxgl.Popup({
    maxWidth: '300px',
    closeButton: true,
    closeOnClick: false
  }).setHTML(popupContent);
}

// Show videos modal
function showVideos(placeName, videos) {
  let videoHtml = '';

  if (videos && videos.length > 0) {
    videoHtml = videos.map(video => `
      <div class="col-md-6 mb-3">
        <div class="card h-100">
          ${video.thumbnail_url ? `
            <img src="${video.thumbnail_url}" class="card-img-top" alt="${video.title}">
          ` : ''}
          <div class="card-body">
            <h6 class="card-title">${video.title}</h6>
            <a href="${video.youtube_url}" target="_blank" class="btn btn-sm btn-primary">
              <i class="fas fa-play me-1"></i> Watch on YouTube
            </a>
          </div>
        </div>
      </div>
    `).join('');
  } else {
    videoHtml = `
      <div class="col-12 text-center py-5">
        <i class="fas fa-video-slash fa-3x text-muted mb-3"></i>
        <h6>No Videos Available</h6>
        <p class="text-muted">No travel videos found for ${placeName}.</p>
      </div>
    `;
  }

  const modalHtml = `
    <div class="modal fade" id="videoModal" tabindex="-1">
      <div class="modal-dialog modal-xl">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">
              <i class="fas fa-video text-primary me-2"></i>
              ${placeName} Videos
            </h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
            <div class="row">${videoHtml}</div>
          </div>
        </div>
      </div>
    </div>
  `;

  // Update modal
  const existingModal = document.getElementById('videoModal');
  if (existingModal) existingModal.remove();
  document.body.insertAdjacentHTML('beforeend', modalHtml);

  new bootstrap.Modal(document.getElementById('videoModal')).show();
}

// Filter places
function filterPlaces() {
  loadPlaces();
}

// Search places
function searchPlaces() {
  const searchInput = document.getElementById('map-search');
  const searchTerm = searchInput.value.trim();

  // Show loading state
  const searchButton = searchInput.nextElementSibling;
  const icon = searchButton.querySelector('i');
  const originalIcon = icon.className;
  icon.className = 'fas fa-spinner fa-spin';

  loadPlaces().finally(() => {
    // Restore button state
    icon.className = originalIcon;
  });
}

// Handle search input keyup
function handleSearchKeyup(event) {
  const searchInput = document.getElementById('map-search');
  const suggestionsDiv = document.getElementById('search-suggestions');
  const activeClass = 'active';

  // Don't handle special keys if suggestions are hidden
  const isVisible = !suggestionsDiv.classList.contains('d-none');

  // Handle navigation keys
  if ((event.key === 'ArrowDown' || event.key === 'ArrowUp') && isVisible) {
    event.preventDefault();

    const items = suggestionsDiv.querySelectorAll('.suggestion-item');
    if (items.length === 0) return;

    const currentIndex = Array.from(items).findIndex(item => item.classList.contains(activeClass));

    // Remove current active class
    items[currentIndex]?.classList.remove(activeClass);

    // Calculate new index
    let newIndex;
    if (event.key === 'ArrowDown') {
      newIndex = currentIndex < items.length - 1 ? currentIndex + 1 : 0;
    } else {
      newIndex = currentIndex > 0 ? currentIndex - 1 : items.length - 1;
    }

    // Add active class to new item
    items[newIndex].classList.add(activeClass);

    // Ensure item is visible in scrollable container
    items[newIndex].scrollIntoView({
      block: 'nearest',
      behavior: 'smooth'
    });

    return;
  }

  // Handle Tab key
  if (event.key === 'Tab' && isVisible) {
    event.preventDefault();
    const activeItem = suggestionsDiv.querySelector('.suggestion-item.active');
    if (activeItem) {
      const placeData = places[Array.from(suggestionsDiv.children).indexOf(activeItem)];
      if (placeData) {
        searchInput.value = placeData.name;
        hideSearchSuggestions();
      }
    }
    return;
  }

  // Handle Enter key
  if (event.key === 'Enter') {
    if (isVisible) {
      const activeItem = suggestionsDiv.querySelector('.suggestion-item.active');
      if (activeItem) {
        const placeData = places[Array.from(suggestionsDiv.children).indexOf(activeItem)];
        if (placeData) {
          selectPlace(placeData);
          return;
        }
      }
    }
    searchPlaces();
    return;
  }

  // Clear results on Escape key
  if (event.key === 'Escape') {
    searchInput.value = '';
    hideSearchSuggestions();
    loadPlaces();
    return;
  }

  // Auto-search after 300ms of typing
  clearTimeout(window.searchTimeout);
  window.searchTimeout = setTimeout(() => {
    const searchTerm = searchInput.value.trim();
    if (searchTerm.length >= 2) {
      loadPlaces(true); // true to show suggestions
    } else {
      hideSearchSuggestions();
    }
  }, 300);
}

// Handle click outside to close suggestions
document.addEventListener('click', function(event) {
  const searchContainer = document.querySelector('.position-relative');
  if (!searchContainer.contains(event.target)) {
    hideSearchSuggestions();
  }
});

// Update statistics
function updateStats() {
  const videoCount = places.reduce((sum, place) => sum + place.stats.video_count, 0);
  document.getElementById('places-count').textContent = `${places.length} places`;
  document.getElementById('videos-count').textContent = `${videoCount} videos`;
}

// Helper functions
function hideLoading() {
  const loadingDiv = document.querySelector('.map-loading');
  if (loadingDiv) loadingDiv.style.display = 'none';
}

function showError(message) {
  // TODO: Implement error display
  console.error(message);
}

function getCategoryColor(category) {
  const colors = {
    country: '#28a745',
    mountain: '#6c757d',
    beach: '#17a2b8',
    city: '#dc3545',
    cultural: '#fd7e14',
    adventure: '#6f42c1'
  };
  return colors[category] || '#007bff';
}

function getCategoryClass(category) {
  const classes = {
    country: 'success',
    mountain: 'secondary',
    beach: 'info',
    city: 'danger',
    cultural: 'warning',
    adventure: 'primary'
  };
  return classes[category] || 'primary';
}

// Show videos for a place
async function showPlaceVideos(placeName) {
  let videos = defaultVideos[placeName] || [];

  // If no default videos, try to fetch from API
  if (videos.length === 0) {
    try {
      const response = await fetch(`/videos/place/${encodeURIComponent(placeName)}`);
      const data = await response.json();
      if (data.videos && data.videos.length > 0) {
        videos = data.videos;
      }
    } catch (error) {
      console.error('Error fetching videos:', error);
    }
  }

  // Create video modal content
  const modalContent = `
    <div class="modal fade" id="videoModal" tabindex="-1">
      <div class="modal-dialog modal-xl">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">
              <i class="fas fa-video text-primary me-2"></i>
              ${placeName} Travel Videos
            </h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
            ${videos.length > 0 ? `
              <div class="row">
                ${videos.map(video => `
                  <div class="col-md-6 mb-4">
                    <div class="card h-100">
                      <div class="ratio ratio-16x9">
                        <iframe src="${video.embed_url}"
                                title="${video.title}"
                                frameborder="0"
                                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                                allowfullscreen>
                        </iframe>
                      </div>
                      <div class="card-body">
                        <h6 class="card-title">${video.title}</h6>
                        <p class="card-text small text-muted">${video.description}</p>
                        <a href="${video.youtube_url}" target="_blank" class="btn btn-sm btn-outline-danger">
                          <i class="fab fa-youtube me-1"></i> Watch on YouTube
                        </a>
                      </div>
                    </div>
                  </div>
                `).join('')}
              </div>
            ` : `
              <div class="text-center py-5">
                <i class="fas fa-video-slash fa-3x text-muted mb-3"></i>
                <h5>No Videos Available</h5>
                <p class="text-muted">We couldn't find any travel videos for ${placeName} at the moment.</p>
              </div>
            `}
          </div>
        </div>
      </div>
    </div>
  `;

  // Remove existing modal if any
  const existingModal = document.getElementById('videoModal');
  if (existingModal) {
    existingModal.remove();
  }

  // Add new modal to body
  document.body.insertAdjacentHTML('beforeend', modalContent);

  // Show modal
  const modal = new bootstrap.Modal(document.getElementById('videoModal'));
  modal.show();

  // Clean up when modal is hidden
  document.getElementById('videoModal').addEventListener('hidden.bs.modal', function() {
    this.remove();
  });
}

// Plan a trip to a place
function planTrip(placeName, latitude, longitude) {
  window.location.href = `/trips/new?destination=${encodeURIComponent(placeName)}&latitude=${latitude}&longitude=${longitude}`;
}

// Handle place selection from suggestions
async function handlePlaceSelection(place) {
  // Hide suggestions
  hideSearchSuggestions();

  // Update search input
  document.getElementById('map-search').value = place.name;

  // Create a new marker
  const markerElement = document.createElement('div');
  markerElement.className = 'custom-marker';
  markerElement.style.backgroundColor = getCategoryColor(place.type === 'place' ? 'City' : place.type);

  // Remove existing markers
  currentMarkers.forEach(marker => marker.remove());
  currentMarkers = [];

  // Create popup
  const popup = await createPopup(place);

  // Add new marker
  const marker = new mapboxgl.Marker(markerElement)
    .setLngLat([place.longitude, place.latitude])
    .setPopup(popup)
    .addTo(currentMap);

  currentMarkers.push(marker);

  // Center map on selected place
  currentMap.flyTo({
    center: [place.longitude, place.latitude],
    zoom: 12,
    essential: true
  });

  // Show popup
  marker.togglePopup();
}

// Initialize map
createMap();
</script>

<style>
  /* Loading indicator */
  .map-loading {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;
    background: rgba(255, 255, 255, 0.9);
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 1000;
  }

  /* Custom marker */
  .custom-marker {
    width: 24px;
    height: 24px;
    border-radius: 50%;
    border: 2px solid white;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    cursor: pointer;
    transition: transform 0.2s;
  }

  .custom-marker:hover {
    transform: scale(1.1);
  }

  /* Video popup styles */
  .video-popup {
    padding: 15px;
    max-width: 350px;
  }

  .video-popup h6 {
    color: #2c3e50;
    font-weight: 600;
    margin-bottom: 8px;
  }

  .video-popup .preview-video {
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    background: #000;
  }

  .video-popup .preview-video .ratio {
    margin: 0;
    border-radius: 8px;
  }

  .video-popup .preview-video p {
    padding: 8px;
    margin: 0;
    background: rgba(0,0,0,0.05);
    border-top: 1px solid rgba(0,0,0,0.05);
  }

  .video-popup .btn {
    padding: 0.5rem 1rem;
    font-weight: 500;
    transition: all 0.2s;
  }

  .video-popup .btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }

  .video-popup .btn i {
    width: 16px;
    text-align: center;
  }

  /* Map controls */
  .map-controls {
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    padding: 15px;
  }

  /* Legend styles */
  .marker-dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    border: 2px solid white;
    box-shadow: 0 1px 2px rgba(0,0,0,0.2);
  }

  /* Ensure popups are always visible */
  .mapboxgl-popup {
    z-index: 1002 !important;
  }

  .mapboxgl-popup-content {
    border-radius: 8px !important;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1) !important;
    padding: 0 !important;
    overflow: hidden !important;
  }

  .mapboxgl-popup-close-button {
    padding: 8px !important;
    font-size: 16px !important;
    color: #666 !important;
    background: none !important;
    border: none !important;
    transition: color 0.2s !important;
  }

  .mapboxgl-popup-close-button:hover {
    color: #000 !important;
    background: none !important;
  }

  /* Video modal styles */
  .modal-content {
    border: none;
    border-radius: 12px;
    overflow: hidden;
  }

  .modal-header {
    background-color: #f8f9fa;
    border-bottom: 1px solid #eee;
    padding: 1rem 1.5rem;
  }

  .modal-header .modal-title {
    display: flex;
    align-items: center;
    font-weight: 600;
  }

  .modal-body {
    padding: 1.5rem;
    background-color: #fafafa;
  }

  /* Video card styles */
  .video-card {
    transition: transform 0.2s;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }

  .video-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  }

  .video-card .card-body {
    padding: 1rem;
  }

  .video-card .card-title {
    font-size: 0.95rem;
    line-height: 1.4;
    margin-bottom: 0.5rem;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .video-card .card-text {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
    margin-bottom: 1rem;
  }

  /* Video iframe container */
  .ratio-16x9 {
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }

  /* Empty state styles */
  .video-empty-state {
    padding: 3rem 1rem;
  }

  .video-empty-state i {
    opacity: 0.5;
    margin-bottom: 1rem;
  }

  .video-empty-state h5 {
    font-weight: 600;
    margin-bottom: 0.5rem;
  }

  /* Search suggestions dropdown */
  .search-suggestions {
    position: absolute;
    top: calc(100% + 5px);
    left: 0;
    right: 0;
    background: white;
    border: 1px solid #dee2e6;
    border-radius: 0.5rem;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
    z-index: 9999;
    max-height: 300px;
    overflow-y: auto;
    margin-top: 0;
    display: none;
  }

  .search-suggestions:not(.d-none) {
    display: block;
  }

  .suggestion-item {
    padding: 0.75rem 1rem;
    cursor: pointer;
    border-bottom: 1px solid #eee;
    transition: all 0.2s;
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .suggestion-item:last-child {
    border-bottom: none;
  }

  .suggestion-item:hover {
    background-color: #f8f9fa;
    transform: translateX(4px);
  }

  .suggestion-item.active {
    background-color: #e9ecef;
    transform: translateX(4px);
  }

  .suggestion-title {
    font-weight: 600;
    color: #2c3e50;
    margin-bottom: 0.25rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .suggestion-details {
    font-size: 0.875rem;
    color: #6c757d;
    padding-left: 1.75rem;
  }

  .suggestion-icon {
    color: #007bff;
    width: 1.25rem;
    text-align: center;
    flex-shrink: 0;
  }

  /* Empty state */
  .suggestion-empty {
    padding: 2rem 1rem;
    text-align: center;
    color: #6c757d;
  }

  .suggestion-empty i {
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
    opacity: 0.5;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .map-controls {
      width: calc(100% - 30px) !important;
      margin: 15px !important;
    }

    .search-suggestions {
      max-height: 250px;
    }
  }
</style>
